generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Incident {
  id              Int              @id @default(autoincrement())
  carId           Int
  reportedById    Int
  assignedToId    Int?
  title           String
  description     String
  severity        IncidentSeverity @default(LOW)
  status          IncidentStatus   @default(PENDING)
  type            IncidentType
  location        String?
  latitude        Float?
  longitude       Float?
  occurredAt      DateTime
  reportedAt      DateTime         @default(now())
  carReadingId    Int? 
  images          String[]
  documents       String[]
  resolutionNotes String?
  estimatedCost   Float?
  actualCost      Float?
  resolvedAt      DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  car             Car              @relation(fields: [carId], references: [id])
  reportedBy      User             @relation("IncidentReporter", fields: [reportedById], references: [id])
  assignedTo      User?            @relation("IncidentAssignee", fields: [assignedToId], references: [id])
  carReading      CarReading? @relation(fields: [carReadingId], references: [id])
  updates         IncidentUpdate[]
  auditLogs       IncidentAuditLog[]   
  @@index([carId])
  @@index([reportedById])
  @@index([assignedToId])
  @@index([status])
  @@index([severity])
  @@index([occurredAt])
  @@map("incidents")
}

model IncidentUpdate {
  id          Int      @id @default(autoincrement())
  incidentId  Int
  userId      Int
  message     String
  updateType  IncidentUpdateType
  createdAt   DateTime @default(now())

  incident    Incident @relation(fields: [incidentId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([incidentId])
  @@index([userId])
  @@map("incident_updates")
}

model Car {
  id          Int        @id @default(autoincrement())
  make        String
  model       String
  year        Int
  plateNumber String     @unique
  incidents   Incident[]
  readings  CarReading[]   

}

model CarReading {
  id        Int       @id @default(autoincrement())
  mileage   Int
  fuelLevel Float
  createdAt DateTime  @default(now())

  carId     Int       // Foreign key
  car       Car       @relation(fields: [carId], references: [id])
  incidents Incident[] 
}

model User {
  id               Int              @id @default(autoincrement())
  name             String
  email            String           @unique
  password         String
  reportedIncidents Incident[]      @relation("IncidentReporter")
  assignedIncidents Incident[]      @relation("IncidentAssignee")
  updates           IncidentUpdate[]
  auditLogs       IncidentAuditLog[]  
}
model IncidentAuditLog {
  id         Int      @id @default(autoincrement())
  incidentId Int
  userId     Int
  field      String    
  oldValue   String?   
  newValue   String?  
  createdAt  DateTime  @default(now())


  incident   Incident  @relation(fields: [incidentId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([incidentId])
  @@index([userId])
  @@map("incident_audit_logs")
}


enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  @@map("incident_severities")
}

enum IncidentStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
  @@map("incident_statuses")
}

enum IncidentType {
  ACCIDENT
  BREAKDOWN
  THEFT
  VANDALISM
  MAINTENANCE_ISSUE
  TRAFFIC_VIOLATION
  FUEL_ISSUE
  OTHER
  @@map("incident_types")
}

enum IncidentUpdateType {
  STATUS_CHANGE
  ASSIGNMENT
  COMMENT
  COST_UPDATE
  RESOLUTION
  @@map("incident_update_types")
}
